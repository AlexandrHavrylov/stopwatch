{"version":3,"sources":["components/App.styled.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["StopwatchContainer","styled","div","WatchEl","span","Button","button","App","useState","isStarted","setIsStarted","time","setTime","isClicked","setIsClicked","useEffect","timer$","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","Math","floor","slice","type","clickType","onClick","prevState","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEaA,EAAqBC,IAAOC,IAAV,8CAGlBC,EAAUF,IAAOG,KAAV,oGAOPC,EAASJ,IAAOK,OAAV,mN,+BCNJ,SAASC,IACtB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,IAOnB,OANAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACTZ,GAAaG,GAAQ,SAACU,GAAD,OAAcA,EAAW,QAG3C,WACLN,EAAOO,OACPP,EAAOQ,cAER,CAACf,IAeJ,OACE,qCACE,eAACT,EAAD,WACE,eAACG,EAAD,YAAW,IAAOsB,KAAKC,MAAMf,EAAO,MAAQ,IAAKgB,OAAO,GAAxD,QACA,eAACxB,EAAD,YAAW,IAAOsB,KAAKC,MAAMf,EAAO,IAAM,IAAKgB,OAAO,GAAtD,QACA,cAACxB,EAAD,WAAW,IAAOsB,KAAKC,MAAMf,GAAQ,IAAKgB,OAAO,QAEnD,cAACtB,EAAD,CAAQuB,KAAK,SAASC,UAAW,QAASC,QApBnB,WACzBpB,GAAa,SAACqB,GAAD,OAAgBA,KAC7BtB,GAAaG,EAAQ,IAkBnB,SACGH,EAAY,OAAS,UAExB,cAACJ,EAAD,CAAQuB,KAAK,SAASC,UAAW,OAAQC,QAlBnB,WACxBjB,GAAaH,GAAa,GAC1BI,GAAa,GACbkB,YAAW,WACTlB,GAAa,KACZ,MAaD,kBAGA,cAACT,EAAD,CACEwB,UAAW,QACXD,KAAK,SACLE,QAAS,WACPlB,EAAQ,GACRF,GAAa,IALjB,sBCnDN,IAYeuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAD,MAEFsC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3ca78ed2.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const StopwatchContainer = styled.div`\r\n  padding: 24px;\r\n`;\r\nexport const WatchEl = styled.span`\r\n  font-size: 24px;\r\n  :not(:last-child) {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 8px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n\r\n  :not(:last-child) {\r\n    margin-right: 5px;\r\n  }\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n","import { WatchEl } from \"components/App.styled\";\r\nimport { StopwatchContainer } from \"components/App.styled\";\r\nimport { Button } from \"components/App.styled\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { interval, Subject, takeUntil } from \"rxjs\";\r\n\r\nexport default function App() {\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer$ = new Subject();\r\n    interval(1000)\r\n      .pipe(takeUntil(timer$))\r\n      .subscribe(() => {\r\n        isStarted && setTime((prevTime) => prevTime + 1);\r\n      });\r\n\r\n    return () => {\r\n      timer$.next();\r\n      timer$.complete();\r\n    };\r\n  }, [isStarted]);\r\n\r\n  const handleOnStartClick = () => {\r\n    setIsStarted((prevState) => !prevState);\r\n    isStarted && setTime(0);\r\n  };\r\n\r\n  const handleOnWaitClick = () => {\r\n    isClicked && setIsStarted(false);\r\n    setIsClicked(true);\r\n    setTimeout(() => {\r\n      setIsClicked(false);\r\n    }, 300);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StopwatchContainer>\r\n        <WatchEl>{(\"0\" + (Math.floor(time / 3600) % 24)).slice(-2)} :</WatchEl>\r\n        <WatchEl>{(\"0\" + (Math.floor(time / 60) % 60)).slice(-2)} :</WatchEl>\r\n        <WatchEl>{(\"0\" + (Math.floor(time) % 60)).slice(-2)}</WatchEl>\r\n      </StopwatchContainer>\r\n      <Button type=\"button\" clickType={\"start\"} onClick={handleOnStartClick}>\r\n        {isStarted ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n      <Button type=\"button\" clickType={\"wait\"} onClick={handleOnWaitClick}>\r\n        Wait\r\n      </Button>\r\n      <Button\r\n        clickType={\"reset\"}\r\n        type=\"button\"\r\n        onClick={() => {\r\n          setTime(0);\r\n          setIsStarted(true);\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}